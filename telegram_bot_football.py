import logging
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    filters,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º filters –≤–º–µ—Å—Ç–æ Filters
    CallbackContext,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
TXT_START = [
    "–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™",
    "–ü–æ–µ—Ö–∞–ª–∏! üöÄ",
    "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å! ‚è∞",
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞! üèãÔ∏è‚Äç‚ôÇÔ∏è",
    "–ü–æ–≥–Ω–∞–ª–∏! üèÉ‚Äç‚ôÇÔ∏è"
]

TXT_END = [
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
    "–û—Ç–ª–∏—á–Ω–æ –ø–æ—Ç—Ä—É–¥–∏–ª–∏—Å—å! üëè",
    "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! ‚úÖ",
    "–ú–æ–ª–æ–¥—Ü—ã! üåü",
    "–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üëã"
]

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª–∏–∞–ª–æ–≤
users = {
    6969603804: {
        "trainer_name": "–ë—É–Ω–µ–¥",
        "branches": [
            {"id": "-1002331628469", "name": "295"},
            {"id": "-1002344879265", "name": "117"},
            {"id": "-1002214695720", "name": "44"}
        ]
    },
    413625395: {
        "trainer_name": "–ê–ª–µ–∫—Å–µ–π",
        "branches": [
            {"id": "-1002432571124", "name": "101"},
            {"id": "-1002460005367", "name": "254"}
        ]
    },
    735570267: {
        "trainer_name": "–ú–∞—Ä–∫–æ",
        "branches": [
            {"id": "-1002323472696", "name": "307"},
            {"id": "-1002246173492", "name": "178"}
        ]
    },
    1532520919: {
        "trainer_name": "–°–∞—Ä–¥–æ—Ä",
        "branches": [
            {"id": "-1002231891578", "name": "328"}
        ]
    },
    606134505: {
        "trainer_name": "–ú–∏—Ä–∂–∞–ª–æ–ª",
        "branches": [
            {"id": "-1002413556142", "name": "186"}
        ]
    },
    7666290317: {
        "trainer_name": "–ê–¥–∏–±–∞",
        "branches": [
            {"id": "-1002309219325", "name": "001"}
        ]
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id in users:
        user_name = users[user_id]["trainer_name"]
        branch_names = [branch["name"] for branch in users[user_id]["branches"]]
        update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏ —Ñ–∏–ª–∏–∞–ª:", reply_markup=ReplyKeyboardMarkup([branch_names], one_time_keyboard=True))
        user_data[user_id] = {"step": "choose_branch"}
    else:
        update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in user_data:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    if user_data[user_id]["step"] == "choose_branch":
        branch_names = [branch["name"] for branch in users[user_id]["branches"]]
        if text in branch_names:
            user_data[user_id]["branch"] = next(branch for branch in users[user_id]["branches"] if branch["name"] == text)
            user_data[user_id]["step"] = "choose_action"
            update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª"]], one_time_keyboard=True))
        else:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ñ–∏–ª–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞.")

    elif user_data[user_id]["step"] == "choose_action":
        if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
            user_data[user_id]["step"] = "send_start_photo"
            update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        elif text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
            user_data[user_id]["step"] = "send_end_photo"
            update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        elif text == "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª":
            user_data[user_id]["step"] = "choose_branch"
            branch_names = [branch["name"] for branch in users[user_id]["branches"]]
            update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–∏–ª–∏–∞–ª:", reply_markup=ReplyKeyboardMarkup([branch_names], one_time_keyboard=True))
        else:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

def handle_photo(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    photo = update.message.photo[-1].file_id

    if user_data[user_id]["step"] == "send_start_photo":
        branch = user_data[user_id]["branch"]
        channel_id = branch["id"]
        caption = random.choice(TXT_START)  # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        context.bot.send_photo(chat_id=channel_id, photo=photo, caption=caption)
        update.message.reply_text(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {branch['name']}.")
        user_data[user_id]["step"] = "choose_action"
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª"]], one_time_keyboard=True))

    elif user_data[user_id]["step"] == "send_end_photo":
        branch = user_data[user_id]["branch"]
        channel_id = branch["id"]
        caption = random.choice(TXT_END)  # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        context.bot.send_photo(chat_id=channel_id, photo=photo, caption=caption)
        update.message.reply_text(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {branch['name']}.")
        user_data[user_id]["step"] = "choose_action"
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª"]], one_time_keyboard=True))

def main() -> None:
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    updater = Updater("YOUR_TELEGRAM_BOT_TOKEN")

    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º filters.TEXT
    dispatcher.add_handler(MessageHandler(filters.PHOTO, handle_photo))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º filters.PHOTO

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
