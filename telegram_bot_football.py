import os
import json
import logging
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler, ContextTypes
import datetime
import random
import pytz

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¢–∞—à–∫–µ–Ω—Ç–∞
TASHKENT_TZ = pytz.timezone("Asia/Tashkent")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google
credentials_json = os.getenv("GOOGLE_CREDENTIALS")
if not credentials_json:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

try:
    service_account_info = json.loads(credentials_json)
except json.JSONDecodeError as e:
    logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON GOOGLE_CREDENTIALS: {e}")
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ GOOGLE_CREDENTIALS")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(service_account_info, scopes=scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key("19vkwWg7jt6T5zjy9XpgYPQz0BA7mtfpSAt6s1hGA53g").sheet1

def get_schedule():
    try:
        data = sheet.get_all_records()
        if not data:
            logger.error("Google Sheets –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫!")
        else:
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data[:3]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
        return {str(row['Trainer_ID']): row for row in data}  # –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ —Å—Ç—Ä–æ–∫–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def get_fines():
    try:
        fines_sheet = gc.open_by_key("19vkwWg7jt6T5zjy9XpgYPQz0BA7mtfpSAt6s1hGA53g").worksheet("Fines")
        data = fines_sheet.get_all_records()
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤: {e}")
        return []

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = ["5385649", "7368748440"]  # –ü—Ä–∏–≤–æ–¥–∏–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫ —Å—Ç—Ä–æ–∫–µ

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
TRAINER_KEYBOARD = ReplyKeyboardMarkup([
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_KEYBOARD = ReplyKeyboardMarkup([
    ["–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∑–∞ —Ç—Ä–µ–Ω–µ—Ä–∞"],
    ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —à—Ç—Ä–∞—Ñ—ã"],
    ["–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É"]
], resize_keyboard=True)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)  # –ü—Ä–∏–≤–æ–¥–∏–º user_id –∫ —Å—Ç—Ä–æ–∫–µ
    schedule = get_schedule()
    
    logger.info(f"User ID: {user_id}")  # –õ–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"–ö–ª—é—á–∏ –≤ schedule: {list(schedule.keys())}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ Trainer_ID
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    if user_id in ADMIN_IDS:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=ADMIN_KEYBOARD)
    elif user_id in schedule:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NOVA Assistant! –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç—ã –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. "
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
            reply_markup=TRAINER_KEYBOARD
        )
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def send_fines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id not in ADMIN_IDS:
        return
    
    fines = get_fines()
    if not fines:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —à—Ç—Ä–∞—Ñ–æ–≤ –Ω–µ—Ç.")
        return
    
    fines_by_trainer = {}
    for fine in fines:
        trainer_name = fine['Trainer_Name']
        date = fine['Date']
        time = fine['Time']
        if trainer_name not in fines_by_trainer:
            fines_by_trainer[trainer_name] = []
        fines_by_trainer[trainer_name].append(f"{date}, {time} ‚Äî 1 —à—Ç—Ä–∞—Ñ")
    
    message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n"
    for trainer, records in fines_by_trainer.items():
        message += f"\nüîπ {trainer}\n" + "\n".join(records) + "\n"
    
    await update.message.reply_text(message)

async def send_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['last_command'] = "start"
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")

async def send_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['last_command'] = "end"
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
app = Application.builder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("stats", send_fines))
app.add_handler(MessageHandler(filters.Regex("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), send_start))
app.add_handler(MessageHandler(filters.Regex("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), send_end))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()

