import gspread
from oauth2client.service_account import ServiceAccountCredentials
import logging
from datetime import datetime, timedelta
import pytz
from telegram import Bot
from telegram.ext import Updater, CallbackContext

# –£–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¢–∞—à–∫–µ–Ω—Ç–∞
tashkent_tz = pytz.timezone('Asia/Tashkent')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("Football_School").sheet1

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7801498081:AAFCSe2aO5A2ZdnSqIblaf-45aRQQuybpqQ"
bot = Bot(token=BOT_TOKEN)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
def get_trainer_schedule():
    data = sheet.get_all_records()
    schedule = {}
    for row in data:
        trainer_id = row["Trainer_ID"]
        schedule[trainer_id] = {
            "name": row["Trainer_Name"],
            "branch": row["Branch"],
            "start_time": row["Start_Time"],
            "end_time": row["End_Time"],
            "channel_id": row["Channel_ID"],
            "days_of_week": row["Days_of_Week"].split(", ")
        }
    return schedule

# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_reminders(context: CallbackContext):
    schedule = get_trainer_schedule()
    now = datetime.now(tashkent_tz)
    today = now.strftime("%A")
    
    for trainer_id, trainer_info in schedule.items():
        if today in trainer_info["days_of_week"]:
            start_time = datetime.strptime(trainer_info["start_time"], "%H:%M").time()
            start_datetime = datetime.combine(now.date(), start_time).astimezone(tashkent_tz)
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            if now + timedelta(hours=1) >= start_datetime > now:
                bot.send_message(chat_id=trainer_id, text="–ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç—ã –≤–æ–≤—Ä–µ–º—è.")
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            if now >= start_datetime and now < start_datetime + timedelta(minutes=1):
                bot.send_message(chat_id=trainer_id, text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üì∏")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
def should_accept_photo(trainer_id):
    schedule = get_trainer_schedule()
    now = datetime.now(tashkent_tz)
    today = now.strftime("%A")
    
    if trainer_id not in schedule:
        return False, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
    
    trainer_info = schedule[trainer_id]
    if today not in trainer_info["days_of_week"]:
        return False, "–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    
    start_time = datetime.strptime(trainer_info["start_time"], "%H:%M").time()
    end_time = datetime.strptime(trainer_info["end_time"], "%H:%M").time()
    
    start_datetime = datetime.combine(now.date(), start_time).astimezone(tashkent_tz)
    end_datetime = datetime.combine(now.date(), end_time).astimezone(tashkent_tz)
    
    if now < start_datetime - timedelta(minutes=12):
        return False, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª–∏–∂–µ –∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞."
    
    if now > end_datetime + timedelta(minutes=15):
        return False, "–í—ã –æ–ø–æ–∑–¥–∞–ª–∏ —Å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–æ–º. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω —à—Ç—Ä–∞—Ñ –≤ —Ä–∞–∑–º–µ—Ä–µ 30% –æ—Ç –≥–æ–Ω–æ—Ä–∞—Ä–∞ –∑–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."
    
    return True, ""

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
def process_photo(trainer_id, photo):
    accepted, message = should_accept_photo(trainer_id)
    if not accepted:
        return message
    
    schedule = get_trainer_schedule()
    trainer_info = schedule[trainer_id]
    channel_id = trainer_info["channel_id"]
    
    if not channel_id:
        logger.warning(f"–ù–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ Channel_ID –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {trainer_info['branch']}")
        return f"–í–Ω–∏–º–∞–Ω–∏–µ! –£ —Ñ–∏–ª–∏–∞–ª–∞ {trainer_info['branch']} –Ω–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –î–æ–±–∞–≤—å—Ç–µ Channel_ID –≤ —Ç–∞–±–ª–∏—Ü—É."
    
    bot.send_photo(chat_id=channel_id, photo=photo, caption=f"–§–æ—Ç–æ–æ—Ç—á–µ—Ç –æ—Ç {trainer_info['name']} ({trainer_info['branch']})")
    
    return "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ."

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
updater = Updater(token=BOT_TOKEN, use_context=True)
job_queue = updater.job_queue
job_queue.run_repeating(send_reminders, interval=600, first=10)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
updater.start_polling()
updater.idle()
