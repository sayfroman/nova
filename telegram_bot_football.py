import os
import json
import logging
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ContextTypes
import datetime
import pytz
import random
import asyncio

# ==============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
# ==============================
TASHKENT_TZ = pytz.timezone("Asia/Tashkent")

# ==============================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==============================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

credentials_json = os.getenv("GOOGLE_CREDENTIALS")
if not credentials_json:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

# ==============================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
# ==============================
try:
    service_account_info = json.loads(credentials_json)
except json.JSONDecodeError as e:
    logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON GOOGLE_CREDENTIALS: {e}")
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ GOOGLE_CREDENTIALS")

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(service_account_info, scopes=scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key("19vkwWg7jt6T5zjy9XpgYPQz0BA7mtfpSAt6s1hGA53g").sheet1
fines_sheet = gc.open_by_key("19vkwWg7jt6T5zjy9XpgYPQz0BA7mtfpSAt6s1hGA53g").worksheet("Fines")

# ==============================
# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
# ==============================
START_TEXTS = [
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞–∂–µ–º –º–∞–∫—Å–∏–º—É–º! üí™‚öΩ",
    "–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ª—É—á—à–∏–º –º–æ–º–µ–Ω—Ç–∞–º! üî•",
    "–°—Ç–∞—Ä—Ç—É–µ–º! –°–µ–≥–æ–¥–Ω—è –º—ã —Å—Ç–∞–Ω–µ–º —Å–∏–ª—å–Ω–µ–µ! üöÄ"
]

END_TEXTS = [
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ä–µ–±—è—Ç–∞! üëè",
    "–ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ú–æ–ª–æ–¥—Ü—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üî•",
    "–ó–∞–≤–µ—Ä—à–∏–ª–∏! –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ–º–∞–Ω–¥–∞! üíØ"
]

# ==============================
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Google Sheets
# ==============================
def get_schedule():
    try:
        data = sheet.get_all_records()
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {data}")
        return {str(row['Trainer_ID']): row for row in data}  # –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ —Å—Ç—Ä–æ–∫–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

# ==============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
# ==============================
ADMIN_IDS = ["5385649", "7368748440"]

TRAINER_KEYBOARD = ReplyKeyboardMarkup([
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
    ["–ú–æ–∏ —à—Ç—Ä–∞—Ñ—ã"]
], resize_keyboard=True)

ADMIN_KEYBOARD = ReplyKeyboardMarkup([
    ["–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∑–∞ —Ç—Ä–µ–Ω–µ—Ä–∞"],
    ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —à—Ç—Ä–∞—Ñ—ã"],
    ["–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É"]
], resize_keyboard=True)

# ==============================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
# ==============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    schedule = get_schedule()

    if user_id in ADMIN_IDS:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=ADMIN_KEYBOARD)
    elif user_id in schedule:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NOVA Assistant! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
            reply_markup=TRAINER_KEYBOARD
        )
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# ==============================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# ==============================
async def check_training_time(user_id: str):
    schedule = get_schedule()
    if user_id not in schedule:
        return None
    
    now = datetime.datetime.now(TASHKENT_TZ)
    user_schedule = schedule[user_id]
    training_start = datetime.datetime.strptime(user_schedule["Start_Time"], "%H:%M").time()
    training_end = datetime.datetime.strptime(user_schedule["End_Time"], "%H:%M").time()
    return training_start, training_end

# ==============================
# –§–∏–∫—Å–∞—Ü–∏—è —à—Ç—Ä–∞—Ñ–æ–≤
# ==============================
async def log_fine(user_id: str, reason: str):
    now = datetime.datetime.now(TASHKENT_TZ).strftime("%d-%m-%Y %H:%M")
    fines_sheet.append_row([user_id, reason, now])

# ==============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# ==============================
async def send_start_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    schedule = get_schedule()
    
    if user_id not in schedule:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    training_start, training_end = await check_training_time(user_id)
    now = datetime.datetime.now(TASHKENT_TZ).time()
    if now > (datetime.datetime.combine(datetime.date.today(), training_start) + datetime.timedelta(minutes=10)).time():
        await log_fine(user_id, "–û–ø–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
        await update.message.reply_text("–í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –®—Ç—Ä–∞—Ñ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text(random.choice(START_TEXTS))

# ==============================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
# ==============================
app = Application.builder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.Regex("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), send_start_training))
app.run_polling()

