import os
import json
import logging
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ContextTypes
import datetime
import pytz
import random
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¢–∞—à–∫–µ–Ω—Ç–∞
TASHKENT_TZ = pytz.timezone("Asia/Tashkent")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google
credentials_json = os.getenv("GOOGLE_CREDENTIALS")
if not credentials_json:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

try:
    service_account_info = json.loads(credentials_json)
except json.JSONDecodeError as e:
    logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON GOOGLE_CREDENTIALS: {e}")
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ GOOGLE_CREDENTIALS")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(service_account_info, scopes=scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key("19vkwWg7jt6T5zjy9XpgYPQz0BA7mtfpSAt6s1hGA53g").sheet1

START_TEXTS = [
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞–∂–µ–º –º–∞–∫—Å–∏–º—É–º! üí™‚öΩ",
    "–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ª—É—á—à–∏–º –º–æ–º–µ–Ω—Ç–∞–º! üî•",
    "–°—Ç–∞—Ä—Ç—É–µ–º! –°–µ–≥–æ–¥–Ω—è –º—ã —Å—Ç–∞–Ω–µ–º —Å–∏–ª—å–Ω–µ–µ! üöÄ"
]

END_TEXTS = [
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ä–µ–±—è—Ç–∞! üëè",
    "–ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ú–æ–ª–æ–¥—Ü—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üî•",
    "–ó–∞–≤–µ—Ä—à–∏–ª–∏! –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ–º–∞–Ω–¥–∞! üíØ"
]

def get_schedule():
    try:
        data = sheet.get_all_records()
        return {str(row['Trainer_ID']): row for row in data}  # –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ —Å—Ç—Ä–æ–∫–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = ["5385649", "7368748440"]

TRAINER_KEYBOARD = ReplyKeyboardMarkup([
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"]
], resize_keyboard=True)

ADMIN_KEYBOARD = ReplyKeyboardMarkup([
    ["–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∑–∞ —Ç—Ä–µ–Ω–µ—Ä–∞"],
    ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —à—Ç—Ä–∞—Ñ—ã"],
    ["–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É"]
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    schedule = get_schedule()

    if user_id in ADMIN_IDS:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=ADMIN_KEYBOARD)
    elif user_id in schedule:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NOVA Assistant! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
            reply_markup=TRAINER_KEYBOARD
        )
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def check_training_time(user_id: str):
    schedule = get_schedule()
    if user_id not in schedule:
        return None
    
    now = datetime.datetime.now(TASHKENT_TZ)
    user_schedule = schedule[user_id]
    training_days = user_schedule["Days_of_Week"].split(", ")
    today = now.strftime("%A")
    if today not in training_days:
        return None
    
    training_start = datetime.datetime.strptime(user_schedule["Start_Time"], "%H:%M").time()
    training_end = datetime.datetime.strptime(user_schedule["End_Time"], "%H:%M").time()
    if training_start <= now.time() <= training_end:
        return True
    return user_schedule["Days_of_Week"], user_schedule["Start_Time"], user_schedule["Branch"]

async def send_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    check_result = await check_training_time(user_id)
    if check_result is True:
        context.user_data['last_command'] = "start"
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
    else:
        days, time, branch = check_result
        await update.message.reply_text(f"–°–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è. –í–∞—à–∞ –±–ª–∏–∂–∞–π—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {days} –≤ {time}, —Ñ–∏–ª–∏–∞–ª {branch}")

async def send_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    check_result = await check_training_time(user_id)
    if check_result is True:
        context.user_data['last_command'] = "end"
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
    else:
        days, time, branch = check_result
        await update.message.reply_text(f"–°–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è. –í–∞—à–∞ –±–ª–∏–∂–∞–π—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {days} –≤ {time}, —Ñ–∏–ª–∏–∞–ª {branch}")

async def send_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    check_result = await check_training_time(user_id)
    if check_result is True:
        last_command = context.user_data.get('last_command')
        text = random.choice(START_TEXTS if last_command == "start" else END_TEXTS)
        await update.message.reply_text(f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. \n{text}")
    else:
        days, time, branch = check_result
        await update.message.reply_text(f"–°–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è. –í–∞—à–∞ –±–ª–∏–∂–∞–π—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {days} –≤ {time}, —Ñ–∏–ª–∏–∞–ª {branch}")

app = Application.builder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.Regex("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), send_start))
app.add_handler(MessageHandler(filters.Regex("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), send_end))
app.add_handler(MessageHandler(filters.Regex("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"), send_photo))

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()


