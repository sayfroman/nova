# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import json
import logging
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, JobQueue
import datetime
import random
import pytz

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¢–∞—à–∫–µ–Ω—Ç–∞
TASHKENT_TZ = pytz.timezone("Asia/Tashkent")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google
# –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets
credentials_json = os.getenv("GOOGLE_CREDENTIALS")
if not credentials_json:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

try:
    service_account_info = json.loads(credentials_json)
except json.JSONDecodeError as e:
    logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON GOOGLE_CREDENTIALS: {e}")
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ GOOGLE_CREDENTIALS")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(service_account_info, scopes=scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key("19vkwWg7jt6T5zjy9XpgYPQz0BA7mtfpSAt6s1hGA53g").sheet1

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
def update_google_sheet_data(context: CallbackContext):
    global sheet
    try:
        sheet = gc.open_by_key("19vkwWg7jt6T5zjy9XpgYPQz0BA7mtfpSAt6s1hGA53g").sheet1
        logger.info("–î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
# –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = ["5385649", "7368748440"]

# –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
# –°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
START_MESSAGES = [
    """üèÜ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –Ω–∞ –ø–æ–ª–µ!
    üèÜ Mashg‚Äôulot boshlandi! Jamoa maydonda!""",
]

END_MESSAGES = [
    """‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ç—Ä—É–¥–∏–ª–∏—Å—å!
    ‚úÖ Mashg‚Äòulot tugadi! Hammasi zo‚Äòr ishladi!""",
]

# –•—Ä–∞–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤
# –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
PENALTIES = {}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–∞
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ –∏–∑ Google Sheets
def get_trainer_info(user_id):
    try:
        data = sheet.get_all_records()
        trainer_sessions = []
        for row in data:
            if "Trainer_ID" in row and str(row["Trainer_ID"]) == str(user_id):
                trainer_sessions.append({
                    "branch": row["Branch"],
                    "start_time": row["Start_Time"],
                    "end_time": row["End_Time"],
                    "channel_id": row["Channel_ID"],
                    "days_of_week": row.get("Days_of_Week", ""),
                    "trainer_name": row.get("Trainer_Name", "–¢—Ä–µ–Ω–µ—Ä")
                })
        return trainer_sessions
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
    return []

# –ö–æ–º–∞–Ω–¥–∞ /start
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    data = sheet.get_all_records()
    
    trainer_name = "–¢—Ä–µ–Ω–µ—Ä"
    for row in data:
        if str(row.get("Trainer_ID", "")) == str(user_id):
            trainer_name = row.get("Trainer_Name", "–¢—Ä–µ–Ω–µ—Ä")
            break
    
    if not any(str(row.get("Trainer_ID", "")) == str(user_id) for row in data):
        await update.message.reply_text(
            "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—Å–∫–æ–≥–æ —à—Ç–∞–±–∞ NOVA Football Uzbekistan."
        )
        return

    keyboard = [["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {trainer_name}! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
async def handle_photo_request(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª
async def handle_photo(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    now = datetime.datetime.now(TASHKENT_TZ).time()
    current_day = datetime.datetime.now(TASHKENT_TZ).strftime("%A")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ
    if update.message.media_group_id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ –Ω–µ –∞–ª—å–±–æ–º.")
        return
    
    trainer_sessions = get_trainer_info(user_id)
    if not trainer_sessions:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä!")
        return
    
    for session in trainer_sessions:
        days_of_week_list = [day.strip() for day in session["days_of_week"].split(",")]
        if current_day not in days_of_week_list:
            continue
        
        try:
            start_dt = datetime.datetime.strptime(session["start_time"], "%H:%M").time()
            end_dt = datetime.datetime.strptime(session["end_time"], "%H:%M").time()
        except ValueError:
            continue
        
        start_early = (datetime.datetime.combine(datetime.date.today(), start_dt) - datetime.timedelta(minutes=5)).time()
        start_late = (datetime.datetime.combine(datetime.date.today(), start_dt) + datetime.timedelta(minutes=12)).time()
        end_early = (datetime.datetime.combine(datetime.date.today(), end_dt) - datetime.timedelta(minutes=12)).time()
        end_late = (datetime.datetime.combine(datetime.date.today(), end_dt) + datetime.timedelta(minutes=12)).time()
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if start_early <= now <= start_late:
            if update.message.photo:
                try:
                    if f'start_photo_sent_{user_id}' not in context.chat_data:
                        await context.bot.send_photo(chat_id=session["channel_id"], photo=update.message.photo[-1].file_id, caption=random.choice(START_MESSAGES))
                        context.chat_data[f'start_photo_sent_{user_id}'] = True
                        await update.message.reply_text(f"{session['trainer_name']}, —Ñ–æ—Ç–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—á–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data="send_end_photo")]]))
                        return
                    else:
                        await update.message.reply_text("–ù—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —á–∞—Ç.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if end_early <= now <= end_late:
            if update.message.photo:
                try:
                    if f'end_photo_sent_{user_id}' not in context.chat_data:
                        await context.bot.send_photo(chat_id=session["channel_id"], photo=update.message.photo[-1].file_id, caption=random.choice(END_MESSAGES))
                        context.chat_data[f'end_photo_sent_{user_id}'] = True
                        await update.message.reply_text(f"{session['trainer_name']}, —Ñ–æ—Ç–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                        return
                    else:
                        await update.message.reply_text("–ù—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —á–∞—Ç.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
        
    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–µ—á–Ω–æ–µ —Ñ–æ—Ç–æ"
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ
async def handle_end_photo_request(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    now = datetime.datetime.now(TASHKENT_TZ).time()
    
    trainer_sessions = get_trainer_info(user_id)
    if not trainer_sessions:
        await query.answer()
        await query.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä!")
        return
    
    for session in trainer_sessions:
        end_dt = datetime.datetime.strptime(session["end_time"], "%H:%M").time()
        end_early = (datetime.datetime.combine(datetime.date.today(), end_dt) - datetime.timedelta(minutes=12)).time()
        end_late = (datetime.datetime.combine(datetime.date.today(), end_dt) + datetime.timedelta(minutes=12)).time()
        
        if now < end_early:
            await query.answer()
            await query.message.reply_text("–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ –Ω–µ –≤ —Ç–æ –≤—Ä–µ–º—è. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")
            return
        elif now > end_late:
            await query.answer()
            await query.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ. –í—ã –æ–ø–æ–∑–¥–∞–ª–∏ —Å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–æ–º, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω —à—Ç—Ä–∞—Ñ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —à—Ç—Ä–∞—Ñ–∞—Ö", callback_data="fine_info")]]))
            return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ç—Ä–∞—Ñ–∞—Ö
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ç—Ä–∞—Ñ–∞—Ö —Ç—Ä–µ–Ω–µ—Ä–∞–º
async def handle_fine_info(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ –≤–æ–≤—Ä–µ–º—è, —Ç—Ä–µ–Ω–µ—Ä—É –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ 30% –æ—Ç —Å—É–º–º—ã –≥–æ–Ω–æ—Ä–∞—Ä–∞ –∑–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. "
        "–§–æ—Ç–æ–æ—Ç—á–µ—Ç—ã –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –µ–µ –Ω–∞—á–∞–ª–∞. "
        "–ê —Ç–∞–∫–∂–µ –∑–∞ 12 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è."
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ$"), handle_photo_request))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue = app.job_queue
    job_queue.run_repeating(update_google_sheet_data, interval=300, first=0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue.run_repeating(send_training_reminders, interval=60, first=0)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
async def send_training_reminders(context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    now = datetime.datetime.now(TASHKENT_TZ).time()
    for user_id in ADMIN_IDS:
        trainer_sessions = get_trainer_info(user_id)
        for session in trainer_sessions:
            start_time = datetime.datetime.strptime(session["start_time"], "%H:%M").time()
            if now == (datetime.datetime.combine(datetime.date.today(), start_time) - datetime.timedelta(minutes=60)).time():
                await context.bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å.")
            if now == (datetime.datetime.combine(datetime.date.today(), start_time) - datetime.timedelta(minutes=30)).time():
                await context.bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.")
            if now == (datetime.datetime.combine(datetime.date.today(), start_time) - datetime.timedelta(minutes=5)).time():
                await context.bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
            if now == (datetime.datetime.combine(datetime.date.today(), start_time) - datetime.timedelta(minutes=10)).time():
                await context.bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–∫–æ—Ä–æ!")

if __name__ == "__main__":
    main()
