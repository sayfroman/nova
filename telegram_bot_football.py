import pytz
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
import logging
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –¢–∞—à–∫–µ–Ω—Ç–∞
tashkent_tz = pytz.timezone('Asia/Tashkent')

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¢–∞—à–∫–µ–Ω—Ç–µ
def get_current_time():
    now = datetime.now(tashkent_tz)
    return now

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
def check_photo_submission_time(training_start_time):
    current_time = get_current_time()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¢–∞—à–∫–µ–Ω—Ç–µ
    time_difference = current_time - training_start_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 12 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if time_difference > timedelta(minutes=12):
        return False  # –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ
    return True  # –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo_file = update.message.photo[-1].get_file()
    photo_file.download('photo.jpg')

    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä)
    training_start_time = datetime(2025, 2, 11, 9, 0, 0, tzinfo=tashkent_tz)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —Ñ–æ—Ç–æ –≤–æ–≤—Ä–µ–º—è
    if check_photo_submission_time(training_start_time):
        await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
    else:
        await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ –∏ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 —à—Ç—Ä–∞—Ñ –≤ –≤–∏–¥–µ 30% –æ—Ç –æ–ø–ª–∞—Ç—ã –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –≤–æ–≤—Ä–µ–º—è.")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞–º
async def send_reminders(context: CallbackContext):
    job = context.job
    bot = context.bot

    # –ß–∞—Å—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_time = get_current_time() + timedelta(hours=1)
    await bot.send_message(job.context['chat_id'], f"–ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç—ã –≤–æ–≤—Ä–µ–º—è.")

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await bot.send_message(job.context['chat_id'], f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üì∏")

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await bot.send_message(job.context['chat_id'], f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

# –°—Ç–∞—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def set_up_reminders(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    context.job_queue.run_once(send_reminders, 3600, context={'chat_id': chat_id})
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤
def get_fine_statistics():
    # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    fines_data = {
        "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω": [
            {"date": "2 —Ñ–µ–≤—Ä–∞–ª—è", "time": "10:15", "fine": 1},
            {"date": "8 —Ñ–µ–≤—Ä–∞–ª—è", "time": "09:55", "fine": 1}
        ],
        "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä": [
            {"date": "5 —Ñ–µ–≤—Ä–∞–ª—è", "time": "11:20", "fine": 1}
        ]
    }

    statistics = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å 2025:\n"
    for trainer, fines in fines_data.items():
        statistics += f"\n{trainer}\n"
        statistics += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∞—Ñ–æ–≤: {len(fines)}\n"
        for fine in fines:
            statistics += f"{fine['date']}, {fine['time']} ‚Äî {fine['fine']} —à—Ç—Ä–∞—Ñ\n"
    return statistics

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤
async def fines(update: Update, context: CallbackContext):
    fines_data = get_fine_statistics()
    await update.message.reply_text(fines_data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
async def main() -> None:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        level=logging.INFO)
    logger = logging.getLogger(__name__)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
    bot = Bot("YOUR_BOT_API_KEY")
    application = Application.builder().token("7801498081:AAFCSe2aO5A2ZdnSqIblaf-45aRQQuybpqQ").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("fines", fines))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CommandHandler("set_reminders", set_up_reminders))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.start_polling()

    # –†–∞–±–æ—Ç–∞–µ–º —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    application.job_queue.run_daily(send_reminders, time="09:00")

    # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    await application.idle()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
