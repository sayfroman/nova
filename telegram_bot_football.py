import logging
import random
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)

# === TOKEN ===
TOKEN = "7801498081:AAFCSe2aO5A2ZdnSqIblaf-45aRQQuybpqQ"

# === TRAINERS ===
TRAINERS = {
    699435808: {
        "name": "–î–∂–∞–º–∏–ª—å –∞–∫–∞",
        "branches": ["101", "216", "254"],
    },
    1532520919: {
        "name": "–°–∞—Ä–¥–æ—Ä –∞–∫–∞",
        "branches": ["328", "160"],
    },
    6969603804: {
        "name": "–ë—É–Ω–µ–¥ –∞–∫–∞",
        "branches": ["117", "44"],
    },
    606134505: {
        "name": "–ú–∏—Ä–¥–∂–∞–ª–æ–ª",
        "branches": ["186"],
    },
    413625395: {
        "name": "–ê–ª–µ–∫—Å–µ–π",
        "branches": ["42"],
    },
}

# === CHANNELS ===
BRANCH_CHANNELS = {
    "42": -1002413556142,
    "186": -1002413556142,
    "117": -1002344879265,
    "44": -1002214695720,
    "328": -1002231891578,
    "160": -1002609810020,
    "101": -1002432571124,
    "216": -1002592035856,
    "254": -1002460005367,
}

# === TEXTS ===
MESSAGES_START = [
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –î–µ—Ç–∏ –≤ –±–æ–µ–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ ‚öΩ",
    "–ú—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏, –Ω–æ —É–∂–µ –∑–∞—Ä—è–∂–µ–Ω—ã —ç–Ω–µ—Ä–≥–∏–µ–π!",
    "–ü–µ—Ä–≤—ã–π —Å–≤–∏—Å—Ç–æ–∫! –ü–æ–≥–Ω–∞–ª–∏!",
    "–†–∞–∑–º–∏–Ω–∫–∞ –ø–æ—à–ª–∞! –°–∏–ª–∞, –ª–æ–≤–∫–æ—Å—Ç—å, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å!",
    "–°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!",
    "–í—Ä–µ–º—è –ø–æ–±–µ–∂–¥–∞—Ç—å ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞!",
    "–ó–∞—Ä—è–∂–∞–µ–º –¥–µ—Ç–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π! –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ.",
    "–í–ø–µ—Ä–µ–¥ –∫ –Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∞–º! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ —Å–∞–º–æ–º —Ä–∞–∑–≥–∞—Ä–µ.",
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –∏ –±–æ–µ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π ‚Äî –º—ã –Ω–∞—á–∞–ª–∏!",
    "–î–≤–∏–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∂–∏–∑–Ω—å! –ù–∞—á–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!",
]

MESSAGES_END = [
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –º–æ–ª–æ–¥—Ü—ã!",
    "–î–µ—Ç–∏ –≤—ã–ª–æ–∂–∏–ª–∏—Å—å –Ω–∞ –º–∞–∫—Å–∏–º—É–º ‚Äî —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ üí™",
    "–°–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –∂–∞—Ä–∫–æ! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–æ—à–ª–∞ –∫ –∫–æ–Ω—Ü—É.",
    "–£—Å—Ç–∞–ª–∏, –Ω–æ –¥–æ–≤–æ–ª—å–Ω—ã! –î–æ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏!",
    "–û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏! –í—Å–µ —Å—Ç–∞—Ä–∞–ª–∏—Å—å.",
    "–§—É—Ç–±–æ–ª—å–Ω–∞—è –º–∞–≥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –¥–æ –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥!",
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –î–µ—Ç–∏ –º–æ–ª–æ–¥—Ü—ã!",
    "–ë—ã–ª–æ –∫—Ä—É—Ç–æ ‚Äî —Å–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
    "–ü–æ—Ä–∞ –¥–æ–º–æ–π –æ—Ç–¥—ã—Ö–∞—Ç—å! –ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –≤ –±–æ–π!",
    "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–∞ –ø–æ–ª–µ! –û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!",
]

# === –°–¢–ê–î–ò–ò ===
SELECT_BRANCH, SELECT_ACTION, WAIT_PHOTO = range(3)

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –•–≠–ù–î–õ–ï–†–´ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    trainer = TRAINERS.get(user_id)

    if not trainer:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END

    context.user_data["name"] = trainer["name"]
    context.user_data["branches"] = trainer["branches"]

    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {trainer['name']}!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=ReplyKeyboardMarkup(
            [[branch] for branch in trainer["branches"]],
            resize_keyboard=True,
            one_time_keyboard=True
        ),
    )
    return SELECT_BRANCH

async def select_branch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_branch = update.message.text
    if selected_branch not in context.user_data["branches"]:
        await update.message.reply_text("‚ùå –§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_BRANCH

    context.user_data["branch"] = selected_branch
    await update.message.reply_text(
        f"üìç –§–∏–ª–∏–∞–ª –≤—ã–±—Ä–∞–Ω: {selected_branch}\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(
            [["–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return SELECT_ACTION

async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = update.message.text
    if action not in ["–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return SELECT_ACTION

    context.user_data["action"] = action
    await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
    return WAIT_PHOTO

async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1].file_id
    branch = context.user_data["branch"]
    action = context.user_data["action"]

    text = random.choice(MESSAGES_START if action == "–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" else MESSAGES_END)
    caption = f"{text}\nüìç –§–∏–ª–∏–∞–ª: {branch}"

    channel = BRANCH_CHANNELS.get(branch)
    if channel:
        await context.bot.send_photo(chat_id=channel, photo=photo, caption=caption)
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")

        if action == "–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
            await update.message.reply_text("üïì –ñ–¥–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        else:
            await update.message.reply_text("üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ–≤–µ–ª–∏ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")

        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª–∏–∞–ª–∞
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
            reply_markup=ReplyKeyboardMarkup(
                [[branch] for branch in context.user_data["branches"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return SELECT_BRANCH
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === MAIN ===

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_BRANCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_branch)],
            SELECT_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_action)],
            WAIT_PHOTO: [MessageHandler(filters.PHOTO, receive_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
